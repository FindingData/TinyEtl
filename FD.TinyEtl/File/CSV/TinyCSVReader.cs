///////////////////////////////////////////////////////////
//  CSVReader.cs
//  Implementation of the Class CSVReader
//  Generated by Enterprise Architect
//  Created on:      06-5ÔÂ-2018 13:41:51
//  Original author: drago
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Collections;

namespace FD.TinyEtl {
    public class TinyCSVReader<T> : TinyReader, IDisposable, IEnumerable<T>
        where T:class
    {

        private TextReader _textReader;
        private bool _closeStreamOnDispose = false;
        private Lazy<IEnumerable<T>> _enumerator = null;
        private bool _clearFields = false;
        private bool _isDisposed = false;

        public TinyCSVRecordConfiguration Configuration { get; private set; }

        public TinyCSVReader(TinyCSVRecordConfiguration configruation)
        {
            Configuration = configruation;
            Init();
        }

       
        public TinyCSVReader(string filePath, TinyCSVRecordConfiguration configuration = null)
        {
            TinyGuard.ArgumentNotNullOrEmpty(filePath, "FilePath");
            Configuration = configuration;
            Init();
            _textReader = new StreamReader(TinyPath.GetFullPath(filePath), configuration.GetEncoding(filePath), false, Configuration.BufferSize);
            _closeStreamOnDispose = true;
        }

        public TinyCSVReader(TextReader textReader,TinyCSVRecordConfiguration configuration = null)
        {
            TinyGuard.ArgumentNotNull(textReader, "TextReader");
            Configuration = configuration;
            Init();
            _textReader = textReader;
        }

        public TinyCSVReader(Stream inStream,TinyCSVRecordConfiguration configuration = null)
        {
            TinyGuard.ArgumentNotNull(inStream, "Stream");
            Configuration = configuration;
            Init();

            if (inStream is MemoryStream)
            {
                _textReader = new StreamReader(inStream);
            }
            else
            {
                _textReader = new StreamReader(inStream ,Configuration.GetEncoding(inStream), false, Configuration.BufferSize);
            }
        }

        private void Init()
        {
            throw new NotImplementedException();
        }

        ~TinyCSVReader()
        {
            Dispose();
        }

        public void Dispose()
        {
            if (_isDisposed)
                return;
            _isDisposed = true;
            if (_closeStreamOnDispose)
            {
                if (_textReader != null)
                {
                    _textReader.Dispose();
                    _textReader = null;
                }
            }
            _closeStreamOnDispose = false;
        }

        public IEnumerator<T> GetEnumerator()
        {
            throw new NotImplementedException();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            throw new NotImplementedException();
        }
    }//end CSVReader

}//end namespace FD.TinyEtl//end namespace CSV