///////////////////////////////////////////////////////////
//  TinyDirectory.cs
//  Implementation of the Class TinyDirectory
//  Generated by Enterprise Architect
//  Created on:      06-5ÔÂ-2018 18:57:40
//  Original author: drago
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



namespace FD.TinyEtl {
	public static class TinyDirectory {
        public static IEnumerable<string> GetFilesBeginWith(string filePath, SearchOption searchOption = SearchOption.AllDirectories)
        {
            TinyGuard.ArgumentNotNullOrEmpty(filePath, "FilePath");

            string dir = Path.GetDirectoryName(filePath);
            string fnWithoutExt = Path.GetFileNameWithoutExtension(filePath);
            string ext = Path.GetExtension(filePath);

            foreach (string sfp in Directory.GetFiles(dir, $"{fnWithoutExt}*{ext}"))
                yield return sfp;
        }

        public static IEnumerable<string> GetFilesEndWith(string filePath, SearchOption searchOption = SearchOption.AllDirectories)
        {
            TinyGuard.ArgumentNotNullOrEmpty(filePath, "FilePath");

            string dir = Path.GetDirectoryName(filePath);
            string fnWithoutExt = Path.GetFileNameWithoutExtension(filePath);
            string ext = Path.GetExtension(filePath);

            foreach (string sfp in Directory.GetFiles(dir, $"*{fnWithoutExt}{ext}"))
                yield return sfp;
        }
    }//end TinyDirectory

}//end namespace FD.TinyEtl