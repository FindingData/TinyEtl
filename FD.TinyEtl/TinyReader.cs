///////////////////////////////////////////////////////////
//  TinyReader.cs
//  Implementation of the Class TinyReader
//  Generated by Enterprise Architect
//  Created on:      06-5ÔÂ-2018 12:25:42
//  Original author: drago
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using FD.TinyEtl;
namespace FD.TinyEtl {
	public abstract class TinyReader : ITinyReader {

        public virtual dynamic Context { get; set; }

        public bool IsValid { get; set; } = true;

        public event EventHandler<TinyBeginLoadEventArgs> BeginLoad;

        public event EventHandler<TinyEndLoadEventArgs> EndLoad;
        
        public bool RaiseBeginLoad(object source)
        {
            EventHandler<TinyBeginLoadEventArgs> eh = BeginLoad;
            if (eh==null)
            {
                return true;
            }
            TinyBeginLoadEventArgs e = new TinyBeginLoadEventArgs() { Source = source };
            eh(this, e);
            return !e.Stop;
        }

        public void RaiseEndLoad(object source)
        {
            EventHandler<TinyEndLoadEventArgs> eh = EndLoad;
            if (eh == null)
            {
                return;
            }
            TinyEndLoadEventArgs e = new TinyEndLoadEventArgs() { Source = source };
            eh(this,e);
        }




	}//end TinyReader

}//end namespace FD.TinyEtl